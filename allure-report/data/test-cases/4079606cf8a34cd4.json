{"uid":"4079606cf8a34cd4","name":"Ошибка при некорректном ID заказа","fullName":"tests.test_order_accept#test_accept_order_invalid_order_id","historyId":"e4cf35b934ecb582b60e886409640e7e","time":{"start":1752766360891,"stop":1752766361078,"duration":187},"description":"\n        Проверяет ошибки при некорректном ID заказа (отсутствующий или несуществующий).\n        ","descriptionHtml":"<pre><code>    Проверяет ошибки при некорректном ID заказа (отсутствующий или несуществующий).\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: assert 500 == 404\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <test_order_accept.TestOrderAccept object at 0x000001DDAE912A10>, order_api = <api.order_api.OrderApi object at 0x000001DDAE913E50>, order_id = None, courier_id = 1, expected_status = 404\n\n    @allure.title(\"Ошибка при некорректном ID заказа\")\n    @pytest.mark.parametrize(\n        \"order_id, courier_id, expected_status\",\n        [\n            (None, 1, 404),       # заказ не передан в URL\n            (999999, 1, 404),     # несуществующий заказ\n        ])\n    def test_accept_order_invalid_order_id(self, order_api, order_id, courier_id, expected_status):\n        \"\"\"\n        Проверяет ошибки при некорректном ID заказа (отсутствующий или несуществующий).\n        \"\"\"\n        response = order_api.accept_order(order_id, courier_id)\n>       assert response.status_code == expected_status\nE       assert 500 == 404\nE        +  where 500 = <Response [500]>.status_code\n\ntests\\test_order_accept.py:74: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1752766354313,"stop":1752766354441,"duration":128},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"order_api","time":{"start":1752766360890,"stop":1752766360891,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"testStage":{"description":"\n        Проверяет ошибки при некорректном ID заказа (отсутствующий или несуществующий).\n        ","status":"failed","statusMessage":"AssertionError: assert 500 == 404\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <test_order_accept.TestOrderAccept object at 0x000001DDAE912A10>, order_api = <api.order_api.OrderApi object at 0x000001DDAE913E50>, order_id = None, courier_id = 1, expected_status = 404\n\n    @allure.title(\"Ошибка при некорректном ID заказа\")\n    @pytest.mark.parametrize(\n        \"order_id, courier_id, expected_status\",\n        [\n            (None, 1, 404),       # заказ не передан в URL\n            (999999, 1, 404),     # несуществующий заказ\n        ])\n    def test_accept_order_invalid_order_id(self, order_api, order_id, courier_id, expected_status):\n        \"\"\"\n        Проверяет ошибки при некорректном ID заказа (отсутствующий или несуществующий).\n        \"\"\"\n        response = order_api.accept_order(order_id, courier_id)\n>       assert response.status_code == expected_status\nE       assert 500 == 404\nE        +  where 500 = <Response [500]>.status_code\n\ntests\\test_order_accept.py:74: AssertionError","steps":[{"name":"Принятие заказа None курьером с ID 1","time":{"start":1752766360891,"stop":1752766361077,"duration":186},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"order_id","value":"None"},{"name":"courier_id","value":"1"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":true}],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"stepsCount":1,"attachmentStep":false,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"Принятие заказа"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_order_accept"},{"name":"subSuite","value":"TestOrderAccept"},{"name":"host","value":"WIN-83MOMOE73GI"},{"name":"thread","value":"15468-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_order_accept"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"courier_id","value":"1"},{"name":"expected_status","value":"404"},{"name":"order_id","value":"None"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"4079606cf8a34cd4.json","parameterValues":["1","404","None"]}